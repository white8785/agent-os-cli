name: Pull Request

on:
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install development dependencies
        run: make install-dev

      - name: Run tests
        run: make test

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      
      - name: Install dependencies
        run: make install-dev
      
      - name: Generate pre-release version
        id: version
        run: |
          BASE_VERSION=$(grep '^version = ' pyproject.toml | cut -d '"' -f 2)
          PR_NUMBER=${{ github.event.pull_request.number }}
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          PRE_VERSION="${BASE_VERSION}-pr${PR_NUMBER}.${COMMIT_SHA}"
          echo "pre_version=$PRE_VERSION" >> $GITHUB_OUTPUT
          echo "Generated pre-release version: $PRE_VERSION"
          
          # Update pyproject.toml with pre-release version
          sed -i "s/^version = \".*\"/version = \"$PRE_VERSION\"/" pyproject.toml
      
      - name: Run pre-CI checks
        run: make pre-ci
      
      - name: Build distribution
        run: make build
      
      - name: Check distribution
        run: |
          uv pip install twine
          uv run twine check dist/*
      
      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/

  publish-test-pypi:
    name: Publish to Test PyPI
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Download distribution
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/
      
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          attestations: false